NerdMiner_v2 Testing TODO List
================================

This file contains a comprehensive list of all tests that need to be implemented for the NerdMiner_v2 Bitcoin mining project.

## 1. TEST INFRASTRUCTURE SETUP
□ Create test/ directory structure
□ Configure platformio.ini for testing environments
□ Set up Unity testing framework integration
□ Create test_main.cpp entry point
□ Set up test utilities and helper functions
□ Configure serial output for test results
□ Add test compilation flags and dependencies

## 2. CORE MINING TESTS (test/test_mining.cpp)
□ Test nonce generation and validation
□ Test difficulty adjustment calculations
□ Test target validation (bytearray_target vs hash comparison)
□ Test mining loop termination conditions
□ Test MAX_NONCE_STEP and MAX_NONCE constants
□ Test DEFAULT_DIFFICULTY constant
□ Test miner_data structure initialization
□ Test mining performance benchmarks
□ Test hardware vs software mining modes
□ Test mining task coordination between cores

## 3. SHA256 ALGORITHM TESTS (test/test_sha256.cpp)
□ Test nerdSHA256 software implementation
□ Test hardware SHA256 acceleration (when available)
□ Test SHA256 double hashing (sha256d)
□ Test midstate calculation and caching
□ Test SHA256 performance comparisons
□ Test SHA256 with known test vectors
□ Test alignment requirements for DMA operations
□ Test sha256_bake optimization functions
□ Validate against test data from nerdSHA_HWTest.cpp
□ Test memory-aligned SHA256 operations

## 4. STRATUM PROTOCOL TESTS (test/test_stratum.cpp)
□ Test JSON parsing for all Stratum methods
□ Test mining.subscribe message generation
□ Test mining.subscribe response parsing
□ Test mining.authorize message generation
□ Test mining.notify message parsing
□ Test mining.submit message generation
□ Test difficulty adjustment parsing
□ Test extranonce handling
□ Test job_id validation
□ Test merkle branch processing
□ Test coinbase transaction construction
□ Test error handling for malformed responses
□ Test connection timeout scenarios
□ Test payload verification functions
□ Test ID sequence generation

## 5. NETWORK & WIFI TESTS (test/test_wifi.cpp)
□ Test WiFi connection establishment
□ Test captive portal functionality
□ Test WiFi Manager configuration saving
□ Test WiFi reconnection logic
□ Test pool connection establishment
□ Test pool disconnection handling
□ Test keep-alive mechanism (30s intervals)
□ Test pool inactivity detection (60s timeout)
□ Test network error recovery
□ Test multiple pool support

## 6. DISPLAY SYSTEM TESTS (test/test_display.cpp)
□ Test display driver initialization for each board type
□ Test screen switching (NerdMiner/ClockMiner/GlobalStats)
□ Test display refresh rates and timing
□ Test font rendering and text display
□ Test image and icon display
□ Test display rotation handling
□ Test brightness control
□ Test display power management
□ Test touch input handling (for supported boards)
□ Test display driver abstraction layer
□ Test no-display mode for headless boards

## 7. STORAGE & CONFIGURATION TESTS (test/test_storage.cpp)
□ Test NVS (Non-Volatile Storage) operations
□ Test configuration saving and loading
□ Test SD card configuration file parsing
□ Test JSON configuration validation
□ Test default configuration fallback
□ Test configuration migration between versions
□ Test storage corruption recovery
□ Test memory usage optimization
□ Test settings persistence across reboots

## 8. BOARD-SPECIFIC HARDWARE TESTS (test/test_hardware.cpp)
□ Test pin mappings for each supported board
□ Test button input handling (OneButton library)
□ Test LED control and status indication
□ Test RGB LED control (FastLED integration)
□ Test I2C communication for supported peripherals
□ Test SPI communication for displays
□ Test PSRAM availability and usage
□ Test USB CDC functionality
□ Test touch controller integration
□ Test SD card slot functionality
□ Test power management features

## 9. UTILITY FUNCTION TESTS (test/test_utils.cpp)
□ Test time formatting functions
□ Test NTP client synchronization
□ Test local time printing
□ Test string manipulation utilities
□ Test byte array conversions
□ Test endian conversion functions
□ Test hexadecimal string formatting
□ Test memory usage reporting
□ Test system information functions
□ Test error logging utilities

## 10. SYSTEM INTEGRATION TESTS (test/test_integration.cpp)
□ Test multi-core task distribution
□ Test FreeRTOS task coordination
□ Test memory allocation across tasks
□ Test watchdog timer functionality
□ Test system reset and recovery
□ Test bootloader and OTA update preparation
□ Test exception handling and crash recovery
□ Test power consumption monitoring
□ Test thermal management
□ Test long-running stability tests

## 11. PERFORMANCE & BENCHMARKING TESTS (test/test_performance.cpp)
□ Benchmark mining hashrate for each board type
□ Test memory usage optimization
□ Test CPU utilization across cores
□ Test power consumption measurements
□ Test heat generation and thermal throttling
□ Test network latency and throughput
□ Test display rendering performance
□ Compare hardware vs software SHA256 performance
□ Test mining efficiency at different difficulty levels
□ Benchmark startup and initialization times

## 12. BOARD-SPECIFIC TEST ENVIRONMENTS
□ NerdminerV2 (ESP32-S3) test environment
□ M5Stick-C test environment
□ M5Stick-C-Plus2 test environment
□ ESP32-CAM test environment
□ TTGO-T-Display test environment
□ ESP32-devKitv1 test environment
□ ESP32-C3 variants test environment
□ ESP32-S2 variants test environment
□ Touch display boards (ESP32-2432S028R) test environment
□ AMOLED display boards test environment

## 13. ERROR HANDLING & EDGE CASES (test/test_errors.cpp)
□ Test network disconnection scenarios
□ Test pool server unavailability
□ Test malformed Stratum responses
□ Test memory allocation failures
□ Test hardware initialization failures
□ Test display driver failures
□ Test SD card read/write errors
□ Test configuration corruption handling
□ Test watchdog timer triggers
□ Test stack overflow detection

## 14. MOCK OBJECTS & TEST FIXTURES
□ Create mock Stratum server for protocol testing
□ Create test mining job fixtures
□ Create known SHA256 test vectors
□ Create mock WiFi responses
□ Create display buffer test fixtures
□ Create configuration file test cases
□ Create error response test cases

## 15. AUTOMATED TESTING SETUP
□ Configure PlatformIO test environments
□ Set up test execution for multiple boards
□ Create test report generation
□ Set up continuous integration testing
□ Configure test coverage reporting
□ Set up performance regression testing
□ Create test result archiving

## 16. DOCUMENTATION & TEST MAINTENANCE
□ Document test execution procedures
□ Create test case documentation
□ Document expected vs actual results
□ Create troubleshooting guide for test failures
□ Document board-specific test requirements
□ Create test data maintenance procedures

## PRIORITY LEVELS:
HIGH: Core mining, SHA256, Stratum protocol tests
MEDIUM: Hardware abstraction, display, storage tests
LOW: Performance benchmarks, edge cases, documentation

## TESTING COMMANDS (from CLAUDE.md):
- Run all tests: pio test
- Run tests for specific environment: pio test -e NerdminerV2
- Run specific test: pio test -f "test_sha256"
- Verbose test output: pio test -v
- Upload and run tests on device: pio test --upload-port /dev/ttyUSB0

## NOTES:
- Tests should run both in simulation and on actual hardware
- Each test should validate against known expected results
- Performance tests should include baseline measurements
- All tests must pass before any production deployment
- Test data should include real Bitcoin network examples where possible